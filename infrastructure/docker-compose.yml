services:
  # PostgreSQL Database with enhanced configuration
  db:
    image: postgis/postgis:15-3.3
    container_name: travel-mvp-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: traveldb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend/scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - travel-mvp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d traveldb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: travel-mvp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - travel-mvp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server --save 60 1 --loglevel warning

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: travel-mvp-backend
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      # Database configuration
      - DB_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@db:5432/traveldb
      - DB_POOL_SIZE=${DB_POOL_SIZE:-10}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-20}
      
      # Application settings
      - FASTAPI_ENV=${FASTAPI_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WORKERS=${WORKERS:-1}
      
      # Security settings
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-dev-jwt-refresh-secret}
      
      # Feature flags
      - ENABLE_ML_RECOMMENDATIONS=${ENABLE_ML_RECOMMENDATIONS:-true}
      - ENABLE_NLP_PARSING=${ENABLE_NLP_PARSING:-true}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-false}
    volumes:
      - ../backend:/app
      - backend_logs:/app/logs
      - backend_models:/app/models
      - backend_temp:/app/temp
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - travel-mvp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: travel-mvp-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - travel-mvp-network
    depends_on:
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_models:
    driver: local
  backend_temp:
    driver: local

networks:
  travel-mvp-network:
    driver: bridge