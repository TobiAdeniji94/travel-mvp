"""fix audit mixin mapping

Revision ID: a407221c898d
Revises: f28df96f3623
Create Date: 2025-08-03 21:02:43.614438

"""
import sqlmodel
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a407221c898d'
down_revision: Union[str, Sequence[str], None] = 'f28df96f3623'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('accommodations', sa.Column('type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True))
    op.add_column('accommodations', sa.Column('star_rating', sa.Integer(), nullable=True))
    op.add_column('accommodations', sa.Column('capacity', sa.Integer(), nullable=True))
    op.add_column('accommodations', sa.Column('check_in_time', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True))
    op.add_column('accommodations', sa.Column('check_out_time', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True))
    op.add_column('accommodations', sa.Column('contact_info', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.alter_column('accommodations', 'price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(),
               existing_nullable=True)
    op.create_index('idx_accommodations_coordinates', 'accommodations', ['latitude', 'longitude'], unique=False)
    op.create_index('idx_accommodations_name', 'accommodations', ['name'], unique=False)
    op.create_index('idx_accommodations_price', 'accommodations', ['price'], unique=False)
    op.create_index('idx_accommodations_rating', 'accommodations', ['rating'], unique=False)
    op.create_index('idx_accommodations_type', 'accommodations', ['type'], unique=False)
    op.add_column('activities', sa.Column('type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True))
    op.add_column('activities', sa.Column('duration_minutes', sa.Integer(), nullable=True))
    op.add_column('activities', sa.Column('difficulty_level', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True))
    op.add_column('activities', sa.Column('age_restrictions', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True))
    op.add_column('activities', sa.Column('accessibility_info', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True))
    op.alter_column('activities', 'price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(),
               existing_nullable=True)
    op.create_index('idx_activities_coordinates', 'activities', ['latitude', 'longitude'], unique=False)
    op.create_index('idx_activities_name', 'activities', ['name'], unique=False)
    op.create_index('idx_activities_price', 'activities', ['price'], unique=False)
    op.create_index('idx_activities_rating', 'activities', ['rating'], unique=False)
    op.create_index('idx_activities_type', 'activities', ['type'], unique=False)
    op.add_column('bookings', sa.Column('total_amount', sa.Numeric(), nullable=True))
    op.add_column('bookings', sa.Column('currency', sqlmodel.sql.sqltypes.AutoString(length=3), nullable=True))
    op.add_column('bookings', sa.Column('confirmation_number', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True))
    op.add_column('bookings', sa.Column('cancellation_reason', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True))
    bookingstatus = postgresql.ENUM(
        'PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED',
        name='bookingstatus'
    )
    bookingstatus.create(op.get_bind(), checkfirst=True)
    op.alter_column(
        'bookings', 'status',
        existing_type=sa.VARCHAR(),
        type_=bookingstatus,
        nullable=True,
        postgresql_using="status::bookingstatus"
    )
    op.create_index('idx_bookings_booking_date', 'bookings', ['booking_date'], unique=False)
    op.create_index('idx_bookings_item', 'bookings', ['item_id', 'item_type'], unique=False)
    op.create_index('idx_bookings_itinerary_id', 'bookings', ['itinerary_id'], unique=False)
    op.create_index('idx_bookings_status', 'bookings', ['status'], unique=False)
    op.create_index('idx_bookings_user_id', 'bookings', ['user_id'], unique=False)
    op.add_column('destinations', sa.Column('country', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True))
    op.add_column('destinations', sa.Column('region', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True))
    op.add_column('destinations', sa.Column('timezone', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True))
    op.add_column('destinations', sa.Column('climate_data', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('destinations', sa.Column('popularity_score', sa.Float(), nullable=True))
    op.add_column(
        'destinations',
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            nullable=True,
            server_default=text('NOW()')
        )
    )
    op.add_column(
        'destinations',
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            nullable=True,
            server_default=text('NOW()')
        )
    )
    op.add_column(
        'destinations',
        sa.Column(
            'is_deleted',
            sa.Boolean(),
            nullable=True,
            server_default=text('false')
        )
    )
    op.add_column(
        'destinations',
        sa.Column(
            'deleted_at',
            sa.DateTime(timezone=True),
            nullable=True
        )
    )
    op.create_index('idx_destinations_coordinates', 'destinations', ['latitude', 'longitude'], unique=False)
    op.create_index('idx_destinations_created_at', 'destinations', ['created_at'], unique=False)
    op.create_index('idx_destinations_name', 'destinations', ['name'], unique=False)
    op.create_index('idx_destinations_rating', 'destinations', ['rating'], unique=False)
    op.add_column('itineraries', sa.Column('budget', sa.Numeric(), nullable=True))
    op.add_column('itineraries', sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True))
    op.add_column('itineraries', sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('itineraries', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('itineraries', sa.Column('is_deleted', sa.Boolean(), nullable=False))
    op.add_column('itineraries', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    
    # Create itinerarystatus enum type
    itinerarystatus = postgresql.ENUM(
        'DRAFT', 'GENERATED', 'BOOKED', 'CANCELLED', 'COMPLETED',
        name='itinerarystatus'
    )
    itinerarystatus.create(op.get_bind(), checkfirst=True)
    
    op.alter_column(
        'itineraries', 'status',
        existing_type=sa.VARCHAR(),
        type_=itinerarystatus,
        nullable=True,
        postgresql_using="status::itinerarystatus"
    )
    op.create_index('idx_itineraries_created_at', 'itineraries', ['created_at'], unique=False)
    op.create_index('idx_itineraries_dates', 'itineraries', ['start_date', 'end_date'], unique=False)
    op.create_index('idx_itineraries_status', 'itineraries', ['status'], unique=False)
    op.create_index('idx_itineraries_user_id', 'itineraries', ['user_id'], unique=False)
    op.add_column('itinerary_accommodations', sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True))
    op.add_column('itinerary_accommodations', sa.Column('check_in_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('itinerary_accommodations', sa.Column('check_out_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('itinerary_accommodations', sa.Column('guest_count', sa.Integer(), nullable=True))
    op.create_index('idx_itinerary_accommodations_accommodation', 'itinerary_accommodations', ['accommodation_id'], unique=False)
    op.create_index('idx_itinerary_accommodations_itinerary', 'itinerary_accommodations', ['itinerary_id'], unique=False)
    op.create_index('idx_itinerary_accommodations_order', 'itinerary_accommodations', ['order'], unique=False)
    op.add_column('itinerary_activities', sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True))
    op.add_column('itinerary_activities', sa.Column('planned_duration', sa.Integer(), nullable=True))
    op.add_column('itinerary_activities', sa.Column('scheduled_time', sa.DateTime(timezone=True), nullable=True))
    op.create_index('idx_itinerary_activities_activity', 'itinerary_activities', ['activity_id'], unique=False)
    op.create_index('idx_itinerary_activities_itinerary', 'itinerary_activities', ['itinerary_id'], unique=False)
    op.create_index('idx_itinerary_activities_order', 'itinerary_activities', ['order'], unique=False)
    op.add_column('itinerary_destinations', sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True))
    op.add_column('itinerary_destinations', sa.Column('planned_duration', sa.Integer(), nullable=True))
    op.create_index('idx_itinerary_destinations_destination', 'itinerary_destinations', ['destination_id'], unique=False)
    op.create_index('idx_itinerary_destinations_itinerary', 'itinerary_destinations', ['itinerary_id'], unique=False)
    op.create_index('idx_itinerary_destinations_order', 'itinerary_destinations', ['order'], unique=False)
    op.add_column('itinerary_transportations', sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True))
    op.add_column('itinerary_transportations', sa.Column('passenger_count', sa.Integer(), nullable=True))
    op.create_index('idx_itinerary_transportations_itinerary', 'itinerary_transportations', ['itinerary_id'], unique=False)
    op.create_index('idx_itinerary_transportations_order', 'itinerary_transportations', ['order'], unique=False)
    op.create_index('idx_itinerary_transportations_transportation', 'itinerary_transportations', ['transportation_id'], unique=False)
    op.add_column('reviews', sa.Column('helpful_votes', sa.Integer(), nullable=False))
    op.add_column('reviews', sa.Column('verified_purchase', sa.Boolean(), nullable=False))
    op.add_column('reviews', sa.Column('language', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True))
    op.create_index('idx_reviews_item', 'reviews', ['item_id', 'item_type'], unique=False)
    op.create_index('idx_reviews_rating', 'reviews', ['rating'], unique=False)
    op.create_index('idx_reviews_review_date', 'reviews', ['review_date'], unique=False)
    op.create_index('idx_reviews_user_id', 'reviews', ['user_id'], unique=False)
    op.add_column('transportations', sa.Column('provider', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True))
    op.add_column('transportations', sa.Column('booking_reference', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True))
    op.add_column('transportations', sa.Column('duration_minutes', sa.Integer(), nullable=True))
    op.add_column('transportations', sa.Column('distance_km', sa.Float(), nullable=True))
    op.add_column('transportations', sa.Column('capacity', sa.Integer(), nullable=True))
    op.alter_column('transportations', 'price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(),
               existing_nullable=True)
    op.create_index('idx_transportations_arrival', 'transportations', ['arrival_lat', 'arrival_long'], unique=False)
    op.create_index('idx_transportations_departure', 'transportations', ['departure_lat', 'departure_long'], unique=False)
    op.create_index('idx_transportations_price', 'transportations', ['price'], unique=False)
    op.create_index('idx_transportations_type', 'transportations', ['type'], unique=False)
    
    # Create userstatus enum type
    userstatus = postgresql.ENUM('ACTIVE', 'INACTIVE', 'SUSPENDED', name='userstatus')
    userstatus.create(op.get_bind(), checkfirst=True)
    
    op.add_column('users', sa.Column('status', userstatus, nullable=True))
    op.add_column('users', sa.Column('profile_data', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('users', sa.Column('is_deleted', sa.Boolean(), nullable=False))
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.create_index('idx_users_created_at', 'users', ['created_at'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.create_index('idx_users_status', 'users', ['status'], unique=False)
    op.create_index('idx_users_username', 'users', ['username'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_users_username', table_name='users')
    op.drop_index('idx_users_status', table_name='users')
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_users_created_at', table_name='users')
    op.drop_column('users', 'deleted_at')
    op.drop_column('users', 'is_deleted')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'profile_data')
    op.drop_column('users', 'status')
    
    # Drop userstatus enum type
    userstatus = postgresql.ENUM('ACTIVE', 'INACTIVE', 'SUSPENDED', name='userstatus')
    userstatus.drop(op.get_bind(), checkfirst=True)
    op.drop_index('idx_transportations_type', table_name='transportations')
    op.drop_index('idx_transportations_price', table_name='transportations')
    op.drop_index('idx_transportations_departure', table_name='transportations')
    op.drop_index('idx_transportations_arrival', table_name='transportations')
    op.alter_column('transportations', 'price',
               existing_type=sa.Numeric(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.drop_column('transportations', 'capacity')
    op.drop_column('transportations', 'distance_km')
    op.drop_column('transportations', 'duration_minutes')
    op.drop_column('transportations', 'booking_reference')
    op.drop_column('transportations', 'provider')
    op.drop_index('idx_reviews_user_id', table_name='reviews')
    op.drop_index('idx_reviews_review_date', table_name='reviews')
    op.drop_index('idx_reviews_rating', table_name='reviews')
    op.drop_index('idx_reviews_item', table_name='reviews')
    op.drop_column('reviews', 'language')
    op.drop_column('reviews', 'verified_purchase')
    op.drop_column('reviews', 'helpful_votes')
    op.drop_index('idx_itinerary_transportations_transportation', table_name='itinerary_transportations')
    op.drop_index('idx_itinerary_transportations_order', table_name='itinerary_transportations')
    op.drop_index('idx_itinerary_transportations_itinerary', table_name='itinerary_transportations')
    op.drop_column('itinerary_transportations', 'passenger_count')
    op.drop_column('itinerary_transportations', 'notes')
    op.drop_index('idx_itinerary_destinations_order', table_name='itinerary_destinations')
    op.drop_index('idx_itinerary_destinations_itinerary', table_name='itinerary_destinations')
    op.drop_index('idx_itinerary_destinations_destination', table_name='itinerary_destinations')
    op.drop_column('itinerary_destinations', 'planned_duration')
    op.drop_column('itinerary_destinations', 'notes')
    op.drop_index('idx_itinerary_activities_order', table_name='itinerary_activities')
    op.drop_index('idx_itinerary_activities_itinerary', table_name='itinerary_activities')
    op.drop_index('idx_itinerary_activities_activity', table_name='itinerary_activities')
    op.drop_column('itinerary_activities', 'scheduled_time')
    op.drop_column('itinerary_activities', 'planned_duration')
    op.drop_column('itinerary_activities', 'notes')
    op.drop_index('idx_itinerary_accommodations_order', table_name='itinerary_accommodations')
    op.drop_index('idx_itinerary_accommodations_itinerary', table_name='itinerary_accommodations')
    op.drop_index('idx_itinerary_accommodations_accommodation', table_name='itinerary_accommodations')
    op.drop_column('itinerary_accommodations', 'guest_count')
    op.drop_column('itinerary_accommodations', 'check_out_date')
    op.drop_column('itinerary_accommodations', 'check_in_date')
    op.drop_column('itinerary_accommodations', 'notes')
    op.drop_index('idx_itineraries_user_id', table_name='itineraries')
    op.drop_index('idx_itineraries_status', table_name='itineraries')
    op.drop_index('idx_itineraries_dates', table_name='itineraries')
    op.drop_index('idx_itineraries_created_at', table_name='itineraries')
    
    # Convert enum back to VARCHAR
    op.execute("ALTER TABLE itineraries ALTER COLUMN status TYPE VARCHAR USING status::text")
    op.alter_column('itineraries', 'status', nullable=False)
    
    # Drop the enum type
    itinerarystatus = postgresql.ENUM('DRAFT', 'GENERATED', 'BOOKED', 'CANCELLED', 'COMPLETED', name='itinerarystatus')
    itinerarystatus.drop(op.get_bind(), checkfirst=True)
    
    op.drop_column('itineraries', 'deleted_at')
    op.drop_column('itineraries', 'is_deleted')
    op.drop_column('itineraries', 'updated_at')
    op.drop_column('itineraries', 'tags')
    op.drop_column('itineraries', 'notes')
    op.drop_column('itineraries', 'budget')
    op.drop_index('idx_destinations_rating', table_name='destinations')
    op.drop_index('idx_destinations_name', table_name='destinations')
    op.drop_index('idx_destinations_created_at', table_name='destinations')
    op.drop_index('idx_destinations_coordinates', table_name='destinations')
    op.drop_column('destinations', 'deleted_at')
    op.drop_column('destinations', 'is_deleted')
    op.drop_column('destinations', 'updated_at')
    op.drop_column('destinations', 'created_at')
    op.drop_column('destinations', 'popularity_score')
    op.drop_column('destinations', 'climate_data')
    op.drop_column('destinations', 'timezone')
    op.drop_column('destinations', 'region')
    op.drop_column('destinations', 'country')
    op.drop_index('idx_bookings_user_id', table_name='bookings')
    op.drop_index('idx_bookings_status', table_name='bookings')
    op.drop_index('idx_bookings_itinerary_id', table_name='bookings')
    op.drop_index('idx_bookings_item', table_name='bookings')
    op.drop_index('idx_bookings_booking_date', table_name='bookings')
    op.alter_column('bookings', 'status',
               existing_type=postgresql.ENUM('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED', name='bookingstatus'),
               type_=sa.VARCHAR(),
               nullable=False)
    bookingstatus = postgresql.ENUM(
        'PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED',
        name='bookingstatus'
    )
    bookingstatus.drop(op.get_bind(), checkfirst=True)
    op.drop_column('bookings', 'cancellation_reason')
    op.drop_column('bookings', 'confirmation_number')
    op.drop_column('bookings', 'currency')
    op.drop_column('bookings', 'total_amount')
    op.drop_index('idx_activities_type', table_name='activities')
    op.drop_index('idx_activities_rating', table_name='activities')
    op.drop_index('idx_activities_price', table_name='activities')
    op.drop_index('idx_activities_name', table_name='activities')
    op.drop_index('idx_activities_coordinates', table_name='activities')
    op.alter_column('activities', 'price',
               existing_type=sa.Numeric(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.drop_column('activities', 'accessibility_info')
    op.drop_column('activities', 'age_restrictions')
    op.drop_column('activities', 'difficulty_level')
    op.drop_column('activities', 'duration_minutes')
    op.drop_column('activities', 'type')
    op.drop_index('idx_accommodations_type', table_name='accommodations')
    op.drop_index('idx_accommodations_rating', table_name='accommodations')
    op.drop_index('idx_accommodations_price', table_name='accommodations')
    op.drop_index('idx_accommodations_name', table_name='accommodations')
    op.drop_index('idx_accommodations_coordinates', table_name='accommodations')
    op.alter_column('accommodations', 'price',
               existing_type=sa.Numeric(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.drop_column('accommodations', 'contact_info')
    op.drop_column('accommodations', 'check_out_time')
    op.drop_column('accommodations', 'check_in_time')
    op.drop_column('accommodations', 'capacity')
    op.drop_column('accommodations', 'star_rating')
    op.drop_column('accommodations', 'type')
    # ### end Alembic commands ###
