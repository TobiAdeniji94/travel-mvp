# syntax=docker/dockerfile:1.4

# ==============================================================================
# Multi-stage Dockerfile for optimized production builds
# ==============================================================================

# ------------------------------------------------------------------------------
# Build stage: Install dependencies and prepare application
# ------------------------------------------------------------------------------
FROM python:3.13-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Set up build environment
WORKDIR /build
ENV PYTHONPATH=/build

# Install Python dependencies in a virtual environment
COPY requirements.txt .
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install dependencies
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir --upgrade pip setuptools wheel \
    && pip install --no-cache-dir -r requirements.txt

# Download and verify spaCy models
RUN --mount=type=cache,target=/root/.cache/pip \
    python -m spacy download en_core_web_lg \
    && python -c "import spacy; nlp = spacy.load('en_core_web_lg'); print(f'✅ spaCy model loaded: {len(nlp.vocab)} tokens')" \
    || (echo "⚠️  Fallback: downloading en_core_web_sm" && python -m spacy download en_core_web_sm)

# Copy application code for any build-time processing
COPY . .

# Pre-compile Python files for faster startup
RUN python -m compileall /build -q

# ------------------------------------------------------------------------------
# Production stage: Minimal runtime image
# ------------------------------------------------------------------------------
FROM python:3.13-slim as production

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    curl \
    ca-certificates \
    tini \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user with specific UID/GID for security
RUN groupadd --gid 1000 appuser \
    && useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set up application directory
WORKDIR /app
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Copy application code with proper ownership
COPY --chown=appuser:appuser --from=builder /build .

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/models /app/temp /app/data \
    && chown -R appuser:appuser /app/logs /app/models /app/temp /app/data

# Set proper permissions for startup script
RUN chmod +x start.sh

# Switch to non-root user
USER appuser

# Health check with better error handling
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || curl -f http://localhost:8000/ || exit 1

# Expose port
EXPOSE 8000

# Set production environment variables
ENV FASTAPI_ENV=production
ENV LOG_LEVEL=info
ENV WORKERS=1

# Use tini as init system for proper signal handling
ENTRYPOINT ["tini", "--", "./start.sh"]

# Add comprehensive labels
LABEL maintainer="Travel MVP Team" \
      version="1.0.0" \
      description="Travel MVP Backend API with enhanced NLP and ML capabilities" \
      org.opencontainers.image.title="Travel MVP Backend" \
      org.opencontainers.image.description="AI-powered travel itinerary generation service" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.source="https://github.com/TobiAdeniji94/travel-mvp" \
      org.opencontainers.image.licenses="MIT"

# ------------------------------------------------------------------------------
# Development stage: Include development tools and dependencies
# ------------------------------------------------------------------------------
FROM production as development

# Switch back to root for development tool installation
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    git \
    vim \
    htop \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    isort \
    flake8 \
    mypy \
    debugpy

# Create development directories
RUN mkdir -p /app/tests /app/docs \
    && chown -R appuser:appuser /app/tests /app/docs

# Switch back to non-root user
USER appuser

# Set development environment variables
ENV FASTAPI_ENV=development
ENV LOG_LEVEL=debug
ENV RELOAD=true

# Development health check (more verbose)
HEALTHCHECK --interval=10s --timeout=10s --start-period=5s --retries=5 \
    CMD curl -f http://localhost:8000/health || exit 1

# Override entrypoint for development
ENTRYPOINT ["tini", "--", "./start.sh"]